public class Player {
    //initialize fields
    private String playerName;//user will set player's name x
    private int tokens;//used as currency to buy HP and hints
    private int currentHP;//amount of chances player has to answer incorrectly
    private final int maxHP = 3;//maximum amount of chances player gets
    private double playerScore;//score goes towards high score file
    private int points;//points go towards percentage correct
    private int hints; //hints can be bought and used to help with questions
    private int potions; //potions can be bought to restore HP
    private int currentRoom; //player's current location
    private double percentCorrect; //percentage of questions answered correctly
    private boolean isAlive = true; //TODO may need to delete from class and place in main

    //Player constructor
    public Player(String playerName, int tokens, int currentHP, double playerScore, int points, int hints,
                 int potions, int currentRoom, double percentCorrect, boolean isAlive) {
        this.playerName = playerName;
        this.tokens = tokens;
        this.currentHP = currentHP;
        this.playerScore = playerScore;
        this.points = points;
        this.hints = hints;
        this.potions = potions;
        this.currentRoom = currentRoom;
        this.percentCorrect = percentCorrect; //TODO add totalQuestions to main
        this.isAlive = isAlive; //TODO may delete from constructor and place in main, or add helper method in class
    }
    //Accessors
    public String getPlayerName() { //TODO tie into FileHandler for score keeping
        return playerName;
    }
    public int getTokens() { //TODO tie into shop: if (Player.getTokens<=0), skip shop
        return tokens;
    }
    public int getCurrentHP() { //TODO tie into methods for healing and is alive
        return currentHP;
    }
    public double getPlayerScore() { //TODO tie into FileHandler for score keeping
        return playerScore;
    }
    public int getPoints() { //TODO ties into level 4 unlock
        return points;
    }
    public int getHints() { //TODO figure out how to implement hints into current question design and userInput
        return hints;
    }
    public int getPotions() { //Used in healPlayer method
        return potions;
    }
    public int getCurrentRoom() { //TODO tie into level design if (Player.getCurrentRoom >1 && <2){Player enters shop}?
        return currentRoom;
    }
    public double getPercentCorrect() { //TODO tie into FileHandler and output at end, may be superfluous and handled in main
        return percentCorrect;
    }

    public boolean isAlive() { //TODO tie into numQuestions and add helper method to tell player they are dead
        return isAlive;
    }

    // Mutators
    public void setPlayerName(String playerName) {//TODO Player.setPlayerName(sc.nextLine()); in main
        this.playerName = playerName;
    }
    public void setTokens(int tokens) { //TODO Player.setTokens(0); in main
        this.tokens = tokens;
    }
        public void setCurrentHP(int currentHP) { //TODO Player.setCurrentHP(3); in main
        this.currentHP = currentHP;
    }
    public void setPlayerScore(double playerScore) { //TODO Player.setScore(0); in main
        this.playerScore = playerScore;
    }
    public void setPoints(int points) { //TODO Player.setPoints(0); in main
        this.points = points;
    }
    public void setHints(int hints) { //TODO Player.setHints(0); in main
        this.hints = hints;
    }
    public void setCurrentRoom(int currentRoom) { //TODO Player.setCurrentRoom(0); in main, further tie into level design
        this.currentRoom = currentRoom;
    }
    public void setPercentCorrect(double percentCorrect) { //TODO Player.setPercentCorrect(0) in main, may be superfluous
        this.percentCorrect = percentCorrect;
    }

    //Helper methods

    public void healPlayer(int hpToAdd) {
        //TODO add "for loop (Player.getPotions > 0) in main and tie usage to UserInput; initialize hpToAdd in main
        this.currentHP += hpToAdd;
        if (this.currentHP < maxHP) {
            potions--;
            }
        else {
            System.out.println("You're already at full health.");
        }
    }
    public void subtractCurrentHP(int hpToSubtract) {
        this.currentHP -= hpToSubtract;
        //TODO if (answer != correctAnswer) in main
        if (this.currentHP > 0) {
            this.currentHP--;
        }
    }
    public void addTokens(int tokensToAdd) {
        this.tokens+=tokensToAdd;
        //TODO if (answer == correctAnswer) in main; initialize tokensToAdd in main
    }

    public void addPoints(int pointsToAdd) {//Helper method to accumulate points
        this.points = pointsToAdd; //TODO initialize pointsToAdd in main
        //TODO tie this in to if (answer == correctAnswer) in main
    }

    public void addPlayerScore(double scoreToAdd) {//Helper method to accumulate player score
        this.playerScore += scoreToAdd; //TODO initialize scoreToAdd in main
    }
    //TODO tie this into points multiplier and write to score file handle
    public void addHints(int hintsToAdd) {//Helper method to add purchased hints to player
        this.hints += hintsToAdd; //TODO initialize hintsToAdd in shop
        //TODO tie this in to shop, or main if shop is abandoned
        tokens--;
    }
    public void addPotions(int potionsToAdd) {//Helper method to add purchased potions to player
        this.potions += potionsToAdd; //TODO initialize potionsToAdd in shop
        //TODO tie this in to shop, or main if shop is abandoned
        tokens--;
    }

    // Helper method to display player status
    public String toString() {
        return "Name: " + this.playerName +
                "\nHP: (" + this.currentHP + "/" + maxHP + ")" +
                "\nTokens: " + this.tokens +
                "\nHints: " + this.hints +
                "\nPotions:" + this.potions +
                "\nCurrent Room: " + this.currentRoom +
                "\nScore: " + this.playerScore;
    }



}